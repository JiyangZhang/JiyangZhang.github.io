# generate the bib file from json file
import seutil as su
from jsonargparse import CLI
import os

from pathlib import Path

class BibGenerator:

    STAMP = "%% This file is generated by script wriiten by Jiyang"

    Consts = """
@String{ASE = "International Conference on Automated Software Engineering (ASE)"}
@String{ACL = "Annual Meeting of the Association for Computational Linguistics (ACL)"}
@String{ESECFSE-DEMO = "International Symposium on the Foundations of Software Engineering (FSE Demonstrations Track)"}
@String{AST = "International Conference on Automation of Software Test (AST)"}
@String{ICSE-SEIP = "International Conference on Software Engineering (ICSE Software Engineering in Practice Track)"}
@String{ISSTA = "International Symposium on Software Testing and Analysis (ISSTA)"}
@String{FSE = "Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (FSE)"}
@String{CAP = "Workshop on Computer Assisted Programming (CAP)"}
@String{ICTIR = "International Conference on Theory of Information Retrieval (ICTIR)"}
    """

    fields = ["title", "macro", "authors", "booktitle", "year"]
    optional_fields = ["pages"]

    def __init__(self) -> None:
        this_dir = Path(os.path.dirname(os.path.realpath(__file__)))
        home_dir = this_dir.parent
        self.pub_src_path = home_dir / "_bibliography"
    
    def generate_bib_file(self, json_file_name: str):
        """Generate the papers.bib file based on the provided json file.
        
        NOTE: 1. json file should exit in the _bibliography directory
              2. pubs should ordered in order (latest at the top)
        command: python -m bib_generator generate_bib_file --json_file_name papers.json
        """

        publication_list = su.io.load(self.pub_src_path / json_file_name)
        bib_string_list = []
        for i, pub_dict in enumerate(publication_list):
            # define fields                
            macro = pub_dict["macro"]
            title = f"{i+1}. " + pub_dict["title"]
            authors = pub_dict["authors"]
            year = pub_dict["year"]
            booktitle = pub_dict["booktitle"]
            bib_string = f"""
@inproceedings{{{macro},
    title = {{{title}}},
    author = {{{authors}}},
    booktitle = {booktitle},
    year = {{{year}}},
"""
            for field in self.optional_fields:
                if pub_dict.get(field):
                    bib_string += f"    {field} = {{{pub_dict[field]}}}\n"
            # end
            bib_string += "}"
            # add to list
            bib_string_list.append(bib_string)
        # endfor

        bib_file = self.STAMP + "\n" + self.Consts + "\n".join(bib_string_list)

        su.io.dump(self.pub_src_path / "papers.bib", bib_file, su.io.Fmt.txt)

if __name__ == "__main__":
    CLI(BibGenerator, as_positional=False)
